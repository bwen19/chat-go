// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: room.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms
WHERE id = $1
`

func (q *Queries) DeleteRoom(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteRoom, id)
	return err
}

const deleteRooms = `-- name: DeleteRooms :exec
DELETE FROM rooms
WHERE id = ANY($1::bigint[])
`

func (q *Queries) DeleteRooms(ctx context.Context, roomIds []int64) error {
	_, err := q.db.Exec(ctx, deleteRooms, roomIds)
	return err
}

const insertRoom = `-- name: InsertRoom :one
INSERT INTO rooms (
    name, cover, category
  )
VALUES (
    $1, $2, $3
  )
RETURNING id, name, cover, category, create_at
`

type InsertRoomParams struct {
	Name     string `json:"name"`
	Cover    string `json:"cover"`
	Category string `json:"category"`
}

func (q *Queries) InsertRoom(ctx context.Context, arg *InsertRoomParams) (*Room, error) {
	row := q.db.QueryRow(ctx, insertRoom, arg.Name, arg.Cover, arg.Category)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cover,
		&i.Category,
		&i.CreateAt,
	)
	return &i, err
}

const retrieveFriendRooms = `-- name: RetrieveFriendRooms :many
SELECT
  m.room_id,
  m.rank,
  m.join_at,
  r.category,
  r.create_at,
  m.member_id,
  u.nickname,
  u.avatar
FROM
  room_members AS m
  JOIN rooms AS r
    ON r.id = m.room_id
  JOIN users AS u
    ON u.id = m.member_id
WHERE m.room_id = $1
`

type RetrieveFriendRoomsRow struct {
	RoomID   int64     `json:"room_id"`
	Rank     string    `json:"rank"`
	JoinAt   time.Time `json:"join_at"`
	Category string    `json:"category"`
	CreateAt time.Time `json:"create_at"`
	MemberID int64     `json:"member_id"`
	Nickname string    `json:"nickname"`
	Avatar   string    `json:"avatar"`
}

func (q *Queries) RetrieveFriendRooms(ctx context.Context, roomID int64) ([]*RetrieveFriendRoomsRow, error) {
	rows, err := q.db.Query(ctx, retrieveFriendRooms, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*RetrieveFriendRoomsRow{}
	for rows.Next() {
		var i RetrieveFriendRoomsRow
		if err := rows.Scan(
			&i.RoomID,
			&i.Rank,
			&i.JoinAt,
			&i.Category,
			&i.CreateAt,
			&i.MemberID,
			&i.Nickname,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveRoom = `-- name: RetrieveRoom :one
SELECT id, name, cover, category, create_at FROM rooms
WHERE id = $1 LIMIT 1
`

func (q *Queries) RetrieveRoom(ctx context.Context, id int64) (*Room, error) {
	row := q.db.QueryRow(ctx, retrieveRoom, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cover,
		&i.Category,
		&i.CreateAt,
	)
	return &i, err
}

const retrieveUserRooms = `-- name: RetrieveUserRooms :many
WITH rooms_cte AS (
  SELECT
    id AS room_id,
    name,
    cover,
    category,
    create_at
  FROM rooms
  WHERE id IN (
    SELECT room_id
    FROM room_members AS m
    WHERE m.member_id = $1
  )
)
SELECT
  room_id,
  name,
  cover,
  category,
  create_at,
  member_id,
  rank,
  join_at,
  nickname,
  avatar
FROM rooms_cte AS r,
  LATERAL (
    SELECT
      member_id,
      rank,
      join_at,
      nickname,
      avatar
    FROM
      room_members AS y
      JOIN users AS u
        ON y.member_id = u.id
    WHERE y.room_id = r.room_id
  ) AS m
`

type RetrieveUserRoomsRow struct {
	RoomID   int64     `json:"room_id"`
	Name     string    `json:"name"`
	Cover    string    `json:"cover"`
	Category string    `json:"category"`
	CreateAt time.Time `json:"create_at"`
	MemberID int64     `json:"member_id"`
	Rank     string    `json:"rank"`
	JoinAt   time.Time `json:"join_at"`
	Nickname string    `json:"nickname"`
	Avatar   string    `json:"avatar"`
}

func (q *Queries) RetrieveUserRooms(ctx context.Context, memberID int64) ([]*RetrieveUserRoomsRow, error) {
	rows, err := q.db.Query(ctx, retrieveUserRooms, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*RetrieveUserRoomsRow{}
	for rows.Next() {
		var i RetrieveUserRoomsRow
		if err := rows.Scan(
			&i.RoomID,
			&i.Name,
			&i.Cover,
			&i.Category,
			&i.CreateAt,
			&i.MemberID,
			&i.Rank,
			&i.JoinAt,
			&i.Nickname,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRoom = `-- name: UpdateRoom :one
UPDATE rooms
SET
  name = COALESCE($1, name),
  cover = COALESCE($2, cover)
WHERE id = $3
RETURNING id, name, cover, category, create_at
`

type UpdateRoomParams struct {
	Name  pgtype.Text `json:"name"`
	Cover pgtype.Text `json:"cover"`
	ID    int64       `json:"id"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg *UpdateRoomParams) (*Room, error) {
	row := q.db.QueryRow(ctx, updateRoom, arg.Name, arg.Cover, arg.ID)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cover,
		&i.Category,
		&i.CreateAt,
	)
	return &i, err
}
