// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: room.sql

package db

import (
	"context"
	"time"
)

const createRoom = `-- name: CreateRoom :one
INSERT INTO rooms (
    name, cover, category
) VALUES (
    $1, $2, $3
) RETURNING
    id, name, cover, category, create_at
`

type CreateRoomParams struct {
	Name     string `json:"name"`
	Cover    string `json:"cover"`
	Category string `json:"category"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (Room, error) {
	row := q.db.QueryRow(ctx, createRoom, arg.Name, arg.Cover, arg.Category)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Cover,
		&i.Category,
		&i.CreateAt,
	)
	return i, err
}

const deleteRooms = `-- name: DeleteRooms :exec
DELETE FROM rooms
WHERE id = ANY($1::bigint[])
`

func (q *Queries) DeleteRooms(ctx context.Context, roomIds []int64) error {
	_, err := q.db.Exec(ctx, deleteRooms, roomIds)
	return err
}

const getUserRooms = `-- name: GetUserRooms :many
WITH rooms_cte AS (
    SELECT id AS room_id, name, cover, category, create_at
    FROM rooms WHERE id IN (
        SELECT room_id FROM room_members AS m
        WHERE m.member_id = $1)
)
SELECT room_id, name, cover, category, create_at,
    member_id, rank, join_at, nickname, avatar
FROM rooms_cte AS r,
    LATERAL (
        SELECT member_id, rank, join_at, nickname, avatar
        FROM room_members AS y
        INNER JOIN users AS u ON y.member_id = u.id
        WHERE y.room_id = r.room_id
    ) AS m
`

type GetUserRoomsRow struct {
	RoomID   int64     `json:"room_id"`
	Name     string    `json:"name"`
	Cover    string    `json:"cover"`
	Category string    `json:"category"`
	CreateAt time.Time `json:"create_at"`
	MemberID int64     `json:"member_id"`
	Rank     string    `json:"rank"`
	JoinAt   time.Time `json:"join_at"`
	Nickname string    `json:"nickname"`
	Avatar   string    `json:"avatar"`
}

func (q *Queries) GetUserRooms(ctx context.Context, memberID int64) ([]GetUserRoomsRow, error) {
	rows, err := q.db.Query(ctx, getUserRooms, memberID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserRoomsRow{}
	for rows.Next() {
		var i GetUserRoomsRow
		if err := rows.Scan(
			&i.RoomID,
			&i.Name,
			&i.Cover,
			&i.Category,
			&i.CreateAt,
			&i.MemberID,
			&i.Rank,
			&i.JoinAt,
			&i.Nickname,
			&i.Avatar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
