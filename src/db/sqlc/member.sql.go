// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: member.sql

package sqlc

import (
	"context"
)

const deleteMember = `-- name: DeleteMember :exec
DELETE FROM room_members
WHERE room_id = $1 AND member_id = $2
`

type DeleteMemberParams struct {
	RoomID   int64 `json:"room_id"`
	MemberID int64 `json:"member_id"`
}

func (q *Queries) DeleteMember(ctx context.Context, arg *DeleteMemberParams) error {
	_, err := q.db.Exec(ctx, deleteMember, arg.RoomID, arg.MemberID)
	return err
}

const deleteMemberByRoom = `-- name: DeleteMemberByRoom :exec
DELETE FROM room_members
WHERE room_id = $1
`

func (q *Queries) DeleteMemberByRoom(ctx context.Context, roomID int64) error {
	_, err := q.db.Exec(ctx, deleteMemberByRoom, roomID)
	return err
}

const deleteMemberByUser = `-- name: DeleteMemberByUser :exec
DELETE FROM room_members
WHERE
    member_id = $1::bigint OR
    room_id = ANY($2::bigint[])
`

type DeleteMemberByUserParams struct {
	UserID  int64   `json:"user_id"`
	RoomIds []int64 `json:"room_ids"`
}

func (q *Queries) DeleteMemberByUser(ctx context.Context, arg *DeleteMemberByUserParams) error {
	_, err := q.db.Exec(ctx, deleteMemberByUser, arg.UserID, arg.RoomIds)
	return err
}

const insertRoomMember = `-- name: InsertRoomMember :exec
INSERT INTO room_members (
    room_id, member_id, rank
) VALUES (
    $1, $2, $3
)
`

type InsertRoomMemberParams struct {
	RoomID   int64  `json:"room_id"`
	MemberID int64  `json:"member_id"`
	Rank     string `json:"rank"`
}

func (q *Queries) InsertRoomMember(ctx context.Context, arg *InsertRoomMemberParams) error {
	_, err := q.db.Exec(ctx, insertRoomMember, arg.RoomID, arg.MemberID, arg.Rank)
	return err
}
