// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: session.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
    id, user_id, refresh_token,
    client_ip, user_agent, expire_at
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, user_id, refresh_token, client_ip, user_agent, expire_at, create_at
`

type CreateSessionParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       int64     `json:"user_id"`
	RefreshToken string    `json:"refresh_token"`
	ClientIp     string    `json:"client_ip"`
	UserAgent    string    `json:"user_agent"`
	ExpireAt     time.Time `json:"expire_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRow(ctx, createSession,
		arg.ID,
		arg.UserID,
		arg.RefreshToken,
		arg.ClientIp,
		arg.UserAgent,
		arg.ExpireAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ClientIp,
		&i.UserAgent,
		&i.ExpireAt,
		&i.CreateAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :exec
DELETE FROM sessions
WHERE id = $1::uuid AND user_id = $2::bigint
`

type DeleteSessionParams struct {
	ID     uuid.UUID `json:"id"`
	UserID int64     `json:"user_id"`
}

func (q *Queries) DeleteSession(ctx context.Context, arg DeleteSessionParams) error {
	_, err := q.db.Exec(ctx, deleteSession, arg.ID, arg.UserID)
	return err
}

const deleteSessionByUser = `-- name: DeleteSessionByUser :exec
DELETE FROM sessions
WHERE user_id = $1::bigint
`

func (q *Queries) DeleteSessionByUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteSessionByUser, userID)
	return err
}

const getSession = `-- name: GetSession :one
SELECT id, user_id, refresh_token, client_ip, user_agent, expire_at, create_at FROM sessions
WHERE id = $1::uuid LIMIT 1
`

func (q *Queries) GetSession(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.db.QueryRow(ctx, getSession, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.RefreshToken,
		&i.ClientIp,
		&i.UserAgent,
		&i.ExpireAt,
		&i.CreateAt,
	)
	return i, err
}

const listSessions = `-- name: ListSessions :many
SELECT
    id, client_ip, user_agent, expire_at, create_at,
    count(*) OVER() AS total
FROM sessions
WHERE user_id = $3::bigint
ORDER BY create_at
LIMIT $1
OFFSET $2
`

type ListSessionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
	UserID int64 `json:"user_id"`
}

type ListSessionsRow struct {
	ID        uuid.UUID `json:"id"`
	ClientIp  string    `json:"client_ip"`
	UserAgent string    `json:"user_agent"`
	ExpireAt  time.Time `json:"expire_at"`
	CreateAt  time.Time `json:"create_at"`
	Total     int64     `json:"total"`
}

func (q *Queries) ListSessions(ctx context.Context, arg ListSessionsParams) ([]ListSessionsRow, error) {
	rows, err := q.db.Query(ctx, listSessions, arg.Limit, arg.Offset, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListSessionsRow{}
	for rows.Next() {
		var i ListSessionsRow
		if err := rows.Scan(
			&i.ID,
			&i.ClientIp,
			&i.UserAgent,
			&i.ExpireAt,
			&i.CreateAt,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
