// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package sqlc

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteUser = `-- name: DeleteUser :many
DELETE FROM users
WHERE id = $1
RETURNING room_id
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, deleteUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var room_id int64
		if err := rows.Scan(&room_id); err != nil {
			return nil, err
		}
		items = append(items, room_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (
    username, hashed_password, nickname,
    avatar, role, room_id
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, username, hashed_password, avatar, nickname, role, room_id, deleted, create_at
`

type InsertUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Nickname       string `json:"nickname"`
	Avatar         string `json:"avatar"`
	Role           string `json:"role"`
	RoomID         int64  `json:"room_id"`
}

func (q *Queries) InsertUser(ctx context.Context, arg *InsertUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.Username,
		arg.HashedPassword,
		arg.Nickname,
		arg.Avatar,
		arg.Role,
		arg.RoomID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Avatar,
		&i.Nickname,
		&i.Role,
		&i.RoomID,
		&i.Deleted,
		&i.CreateAt,
	)
	return &i, err
}

const listUsers = `-- name: ListUsers :many
SELECT
    id, username, avatar, nickname, role,
    deleted, create_at, count(*) OVER() AS total
FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUsersRow struct {
	ID       int64     `json:"id"`
	Username string    `json:"username"`
	Avatar   string    `json:"avatar"`
	Nickname string    `json:"nickname"`
	Role     string    `json:"role"`
	Deleted  bool      `json:"deleted"`
	CreateAt time.Time `json:"create_at"`
	Total    int64     `json:"total"`
}

func (q *Queries) ListUsers(ctx context.Context, arg *ListUsersParams) ([]*ListUsersRow, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Avatar,
			&i.Nickname,
			&i.Role,
			&i.Deleted,
			&i.CreateAt,
			&i.Total,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const retrieveUserByID = `-- name: RetrieveUserByID :one
SELECT id, username, hashed_password, avatar, nickname, role, room_id, deleted, create_at FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) RetrieveUserByID(ctx context.Context, id int64) (*User, error) {
	row := q.db.QueryRow(ctx, retrieveUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Avatar,
		&i.Nickname,
		&i.Role,
		&i.RoomID,
		&i.Deleted,
		&i.CreateAt,
	)
	return &i, err
}

const retrieveUserByName = `-- name: RetrieveUserByName :one
SELECT id, username, hashed_password, avatar, nickname, role, room_id, deleted, create_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) RetrieveUserByName(ctx context.Context, username string) (*User, error) {
	row := q.db.QueryRow(ctx, retrieveUserByName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Avatar,
		&i.Nickname,
		&i.Role,
		&i.RoomID,
		&i.Deleted,
		&i.CreateAt,
	)
	return &i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    username = COALESCE($1, username),
    hashed_password = COALESCE($2, hashed_password),
    avatar = COALESCE($3, avatar),
    nickname = COALESCE($4, nickname),
    role = COALESCE($5, role),
    deleted = COALESCE($6, deleted)
WHERE
    id = $7
RETURNING id, username, hashed_password, avatar, nickname, role, room_id, deleted, create_at
`

type UpdateUserParams struct {
	Username       pgtype.Text `json:"username"`
	HashedPassword pgtype.Text `json:"hashed_password"`
	Avatar         pgtype.Text `json:"avatar"`
	Nickname       pgtype.Text `json:"nickname"`
	Role           pgtype.Text `json:"role"`
	Deleted        pgtype.Bool `json:"deleted"`
	ID             int64       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.Username,
		arg.HashedPassword,
		arg.Avatar,
		arg.Nickname,
		arg.Role,
		arg.Deleted,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Avatar,
		&i.Nickname,
		&i.Role,
		&i.RoomID,
		&i.Deleted,
		&i.CreateAt,
	)
	return &i, err
}
