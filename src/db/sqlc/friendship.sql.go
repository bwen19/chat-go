// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: friendship.sql

package db

import (
	"context"
)

const createFriend = `-- name: CreateFriend :exec
INSERT INTO friendships (
    user_id, friend_id, room_id, status
) VALUES (
    $1, $2, $3, $4
)
`

type CreateFriendParams struct {
	UserID   int64  `json:"user_id"`
	FriendID int64  `json:"friend_id"`
	RoomID   int64  `json:"room_id"`
	Status   string `json:"status"`
}

func (q *Queries) CreateFriend(ctx context.Context, arg CreateFriendParams) error {
	_, err := q.db.Exec(ctx, createFriend,
		arg.UserID,
		arg.FriendID,
		arg.RoomID,
		arg.Status,
	)
	return err
}

const deleteFriend = `-- name: DeleteFriend :many
DELETE FROM friendships
WHERE (
    user_id = $1::bigint AND friend_id = $2::bigint
) OR (
    user_id = $2::bigint AND friend_id = $1::bigint
) RETURNING room_id
`

type DeleteFriendParams struct {
	Id1 int64 `json:"id1"`
	Id2 int64 `json:"id2"`
}

func (q *Queries) DeleteFriend(ctx context.Context, arg DeleteFriendParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, deleteFriend, arg.Id1, arg.Id2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var room_id int64
		if err := rows.Scan(&room_id); err != nil {
			return nil, err
		}
		items = append(items, room_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const deleteFriendByUser = `-- name: DeleteFriendByUser :many
DELETE FROM friendships
WHERE user_id = $1::bigint OR
    friend_id = $1::bigint
RETURNING room_id
`

func (q *Queries) DeleteFriendByUser(ctx context.Context, id int64) ([]int64, error) {
	rows, err := q.db.Query(ctx, deleteFriendByUser, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var room_id int64
		if err := rows.Scan(&room_id); err != nil {
			return nil, err
		}
		items = append(items, room_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
